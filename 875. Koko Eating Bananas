class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1;
        int high = *max_element(piles.begin(), piles.end());
        int res = high;

        while (low <= high) {
            int k = (low + high) / 2;

            long long totalTime = 0;
            for (int i = 0; i < piles.size(); i++) {
                totalTime += ceil(static_cast<double>(piles[i]) / k);
            }

            if (totalTime <= h) {
                res = k;
                high = k - 1;
            } else {
                low = k + 1;
            }
        }

        return res;
    }
};
