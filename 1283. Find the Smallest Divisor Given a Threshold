class Solution {
private:
    int SumbyD(vector<int>& array, int div) {
        int sum = 0;
        for (int i = 0; i < array.size(); i++) {
            sum += ceil((double)array[i] / (double)div);
        }
        return sum;
    }

public:
    int smallestDivisor(vector<int>& nums, int threshold) {
        int low = 1;  
        int high = *max_element(nums.begin(), nums.end());

        while (low <= high) {
            int mid = (low + high) / 2;
            if (SumbyD(nums, mid) <= threshold) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
};
