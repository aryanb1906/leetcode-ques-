
void mergesort(vector<int> &nums, int low, int mid, int high);  

void merge(vector<int> &nums, int low, int high) {
    int mid = (low + high) / 2;
    if (low == high) return;

    merge(nums, low, mid);
    merge(nums, mid + 1, high);
    mergesort(nums, low, mid, high);
}

void mergesort(vector<int> &nums, int low, int mid, int high) {
    vector<int> temp;
    int left = low, right = mid + 1;
    
    while (left <= mid && right <= high) {   
        if (nums[left] <= nums[right]) {
            temp.push_back(nums[left]);
            left++;
        } else {
            temp.push_back(nums[right]);
            right++;
        }
    }

    while (left <= mid) {
        temp.push_back(nums[left]);
        left++;
    }
    while (right <= high) {
        temp.push_back(nums[right]);
        right++;
    }

    for (int i = 0; i < temp.size(); i++) {
        nums[low + i] = temp[i];
    }
}

int main() {
    vector<int> nums ;

    merge(nums, 0, nums.size() - 1);

  

    return 0;
}
