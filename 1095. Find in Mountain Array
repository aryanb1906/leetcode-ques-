class Solution {
public:
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int n = mountainArr.length();

        // 1. Find the peak index
        int low = 0, high = n - 1;
        while (low < high) {
            int mid = (low + high) / 2;
            if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        int peak = low;

        // 2. Binary search on increasing side
        low = 0;
        high = peak;
        while (low <= high) {
            int mid = (low + high) / 2;
            int val = mountainArr.get(mid);
            if (val == target) return mid;
            else if (val < target) low = mid + 1;
            else high = mid - 1;
        }

        // 3. Binary search on decreasing side
        low = peak + 1;
        high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            int val = mountainArr.get(mid);
            if (val == target) return mid;
            else if (val > target) low = mid + 1;
            else high = mid - 1;
        }

        return -1;
    }
};
